package com.github.testclient.ui;

import java.io.IOException;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;

import com.github.testclient.ui.components.ButtonTabComponent;
import com.github.testclient.ui.components.DeviceControlPane;
import com.github.testclient.ui.components.ToolMenuBar;
import com.github.testclient.ui.components.listener.ToolWindowListener;
import com.github.testclient.util.AndroidDevice;
import com.github.testclient.util.JunitReader;

public class TestManagerFrame extends JFrame {
	
	private List<AndroidDevice> devices;
	private ScheduleControlFrame scheduler;
	
	public TestManagerFrame(String selectedDevice, List<AndroidDevice> devices, String templateName) {
		this.devices = devices;
		this.setTitle("TestManager");
		
		initComponents(selectedDevice, templateName);
	}
	
    public TestManagerFrame() {
        initComponents(null, null);
    }

    private void initTestCaseTreeFolder()
    {
    	try 
		{
			JunitReader.getInstance().extractTestCases();
		} 
		catch(IOException e)
		{
			JOptionPane.showMessageDialog(null, "Unable to find TestCase Jar under: libs folder", "No TestCase Found", JOptionPane.ERROR_MESSAGE);
			System.exit(0);
		}
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents(String option, String templateName) {

    	initTestCaseTreeFolder();
    	
        devicesTabbdPane = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new ToolWindowListener());
        
        
        menuBar = new ToolMenuBar(this);
//        addWindowListener(new ToolWindowListener(testCasesTbl));
        setJMenuBar(menuBar);
        
        // Initialize devices base on selection
        if(option == null)
        {
        	devicesTabbdPane.addTab("Temp", new DeviceControlPane(null, this.devices, templateName));
            devicesTabbdPane.setTabComponentAt(0, new ButtonTabComponent(devicesTabbdPane));
        }
        else if("All Devices".equalsIgnoreCase(option))
        {
        	for(int index = 0; index < this.devices.size(); index++)
        	{
        		AndroidDevice device = this.devices.get(index);
        		devicesTabbdPane.addTab(device.getDeviceID(), new DeviceControlPane(device, this.devices, templateName));
                devicesTabbdPane.setTabComponentAt(index, new ButtonTabComponent(devicesTabbdPane));
                devicesTabbdPane.setToolTipTextAt(index, "Device: " + device.getDeviceName() + "-" + device.getDeviceID());
        	}
        }
        else
        {
        	for(AndroidDevice device : devices)
    		{
    			if(option.contains(device.getDeviceID()))
    			{
    				devicesTabbdPane.addTab(device.getDeviceID(), new DeviceControlPane(device, this.devices, templateName));
                    devicesTabbdPane.setTabComponentAt(0, new ButtonTabComponent(devicesTabbdPane));
                    devicesTabbdPane.setToolTipTextAt(0, "Device: " + device.getDeviceName() + "-" + device.getDeviceID());
                    
                    break;
    			}
    		}
        }
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(devicesTabbdPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1035, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(devicesTabbdPane, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    public JTabbedPane getTabbedPane()
    {
    	return this.devicesTabbdPane;
    }
    
    public ScheduleControlFrame getScheduler()
    {
    	if(this.scheduler == null)
		{
			this.scheduler = new ScheduleControlFrame(this);
			this.scheduler.setLocationRelativeTo(null);
			this.scheduler.setVisible(true);
		}
		
		return this.scheduler;
    }
    
    public static void launch(String selectedDevice, List<AndroidDevice> availableDevices, String templateName)
	{
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(TestManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(TestManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(TestManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(TestManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() 
			{
				TestManagerFrame ui;
				ui = new TestManagerFrame(selectedDevice, availableDevices, templateName);
				
				ui.setLocationRelativeTo(null);
				ui.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify                     
    private javax.swing.JTabbedPane devicesTabbdPane;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration          
}
