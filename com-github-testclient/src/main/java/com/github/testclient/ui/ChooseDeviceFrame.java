package com.github.testclient.ui;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

import com.github.testclient.util.AndroidDevice;

/**
 *
 * @author Ray_Zhou
 */
public class ChooseDeviceFrame extends javax.swing.JFrame {

	private boolean launchTestManagerFlag = false;
	/**
	 * Creates new form ChooseDevice
	 */
	public ChooseDeviceFrame(List<AndroidDevice> devices) {
		this.devices = devices;
		launchTestManagerFlag = true;
		
		initComponents();
	}

	public ChooseDeviceFrame(List<AndroidDevice> devices, boolean launchFlag) {
		this.devices = devices;
		this.launchTestManagerFlag = launchFlag;

		initComponents();
	}

	private void initDeviceList() 
	{
		try 
		{
			if(devices.size() > 0 && this.launchTestManagerFlag)
			{
				this.deviceList.addItem("All Devices");
			}
			
			for(AndroidDevice item : devices)
			{
				this.deviceList.addItem(item.getDeviceName() + " - " + item.getDeviceID());
			}
		} 
		catch (Exception e) {
			e.printStackTrace();

			System.out.println("ERROR: Fail to read devices data.");
		}
	}

	private void initTemplateList() {
		try
		{
			// Empty template
			this.templateList.addItem("");
			
			Files.list(Paths.get("./templates"))
					.map(f -> f.getFileName().toString())
					.filter(s -> s.endsWith("template.xml") && !s.endsWith("default.template.xml"))
					.forEach(e -> this.templateList.addItem(e.toString()));
		}
		catch(IOException e)
		{
			System.out.println(e);
		}
		
	}
	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents() {

		contentPane = new javax.swing.JPanel();
		deviceList = new javax.swing.JComboBox<>();
		templateList = new javax.swing.JComboBox<>();
		selectDeviceLabel = new javax.swing.JLabel();
		selectTemplateLabel = new javax.swing.JLabel();
		selectButton = new javax.swing.JButton();
		skipButton = new javax.swing.JButton();
		quitButton = new javax.swing.JButton();

		if(launchTestManagerFlag)
		{
			setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		}
		else
		{
			setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		}
		
		setTitle("Choose Device");

		selectDeviceLabel.setText("Select Device:");
		selectTemplateLabel.setText("Select Template:");
		
		initDeviceList();
		initTemplateList();

		if(devices == null || devices.size() == 0)
		{
			selectButton.setEnabled(false);
		}

		selectButton.setText("Select");
		selectButton.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				selectButtonMouseClicked(evt);
			}
		});

		skipButton.setText("Skip");
		skipButton.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				skipButtonMouseClicked(evt);
			}
		});
		
		// If enter from refresh device, disable skip
		if(!this.launchTestManagerFlag)
		{
			skipButton.setVisible(false);
			selectTemplateLabel.setVisible(false);
			templateList.setVisible(false);
		}

		quitButton.setText("Quit");
		quitButton.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				quitButtonMouseClicked(evt);
			}
		});

		javax.swing.GroupLayout contentPaneLayout = new javax.swing.GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentPaneLayout.createSequentialGroup()
                        .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectDeviceLabel)
                            .addComponent(selectTemplateLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(templateList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deviceList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(selectButton)
                .addGap(18, 18, 18)
                .addComponent(skipButton)
                .addGap(18, 18, 18)
                .addComponent(quitButton)
                .addContainerGap(113, Short.MAX_VALUE))
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPaneLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(selectDeviceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deviceList, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectTemplateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(templateList, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectButton)
                    .addComponent(skipButton)
                    .addComponent(quitButton))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contentPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
	}// </editor-fold>                        

	private void quitButtonMouseClicked(java.awt.event.MouseEvent evt) {
		if(launchTestManagerFlag)
		{
			System.exit(0);
		}
		else
		{
			this.dispose();
		}
	}                                       

	private void selectButtonMouseClicked(java.awt.event.MouseEvent evt) {  
		if(this.devices == null || this.devices.size() == 0) return;

		boolean isDeviceFound = false;

		String deviceInfo = deviceList.getSelectedItem().toString();
		
		if("All Devices".equalsIgnoreCase(deviceInfo))
		{
			if(this.launchTestManagerFlag)
			{
				TestManagerFrame.launch(deviceInfo, this.devices, this.templateList.getSelectedItem().toString());
				this.setVisible(false);
				isDeviceFound = true;
				
				return;
			}
		}
		
		for(AndroidDevice device : devices)
		{
			if(deviceInfo.contains(device.getDeviceID()))
			{
				if(this.launchTestManagerFlag)
				{
					TestManagerFrame.launch(deviceInfo, this.devices, this.templateList.getSelectedItem().toString());
				}

				this.selectedDevice = device;
				this.setVisible(false);
				isDeviceFound = true;
				break;
			}
		}

		if(!isDeviceFound)
		{
			if(this.launchTestManagerFlag)
			{
				TestManagerFrame.launch(null, devices, null);
			}

			this.setVisible(false);
		}
	}                                         

	private void skipButtonMouseClicked(java.awt.event.MouseEvent evt) {   
		if(this.launchTestManagerFlag)
		{
			TestManagerFrame.launch(null, this.devices, null);
		}
		
		this.setVisible(false);
	}

	public AndroidDevice getselectedDevice()
	{
		return this.selectedDevice;
	}

	/**
	 * @param args the command line arguments
	 */
	public static void launchChooseDevice(List<AndroidDevice> devices) {
		ChooseDeviceFrame chooseDevice = new ChooseDeviceFrame(devices);
		chooseDevice.setLocationRelativeTo(null);
		chooseDevice.setVisible(true);
	}

	private List<AndroidDevice> devices;
	private AndroidDevice selectedDevice;

    // Variables declaration - do not modify                     
    private javax.swing.JPanel contentPane;
    private javax.swing.JComboBox<String> deviceList;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JLabel selectDeviceLabel;
    private javax.swing.JLabel selectTemplateLabel;
    private javax.swing.JButton skipButton;
    private javax.swing.JComboBox<String> templateList;
    // End of variables declaration
}
